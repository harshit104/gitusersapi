{"version":3,"sources":["Loading.js","GithubApi.js","App.js","reportWebVitals.js","index.js"],"names":["Loading","className","style","margin","width","display","justifyContent","verticalAlign","top","src","alt","GithubApi","useState","curData","setCurData","loading","setLoading","getData","a","fetch","fetchData","json","resData","console","log","useEffect","Fragment","textAlign","map","curElem","id","avatar_url","login","html_url","target","rel","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAoBeA,EAlBC,WAWZ,OACI,qBAAKC,UAAU,YAAYC,MAVZ,CACfC,OAAQ,eACRC,MAAO,QACPC,QAAS,OACTC,eAAgB,SAChBC,cAAe,SACfC,IAAK,OAIL,SACI,qBAAKC,IAAI,uDAAuDL,MAAM,OAAOM,IAAI,eC4C9EC,EAxDG,WAGd,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,QAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EAAO,uCAAG,8BAAAC,EAAA,sEAEI,+BAFJ,SAGcC,MADV,gCAFJ,cAGJC,EAHI,gBAIYA,EAAUC,OAJtB,OAIJC,EAJI,OAKRN,GAAW,GACXF,EAAWQ,GANH,kDASRC,QAAQC,IAAR,MACAR,GAAW,GAVH,0DAAH,qDAoBb,OAJAS,qBAAU,WACNR,MACD,IAEAF,EACM,cAAC,EAAD,IAML,cAAC,IAAMW,SAAP,UACA,sBAAKzB,UAAU,YAAf,UACI,oBAAIA,UAAU,UAAUC,MAAO,CAACyB,UAAW,UAA3C,mCACA,qBAAK1B,UAAU,qEAAf,SAEQY,EAAQe,KAAI,SAACC,GACT,IAAMC,EAAoCD,EAApCC,GAAIC,EAAgCF,EAAhCE,WAAYC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SAC7B,OACI,sBAAchC,UAAU,+CAAxB,UACI,qBAAKQ,IAAKsB,EAAYrB,IAAI,aAC1B,sBAAKT,UAAU,YAAf,UACI,oBAAIA,UAAU,aAAd,SAA4B+B,IAC5B,mBAAGE,OAAO,SAASC,IAAI,aAAaC,KAAMH,EAAUhC,UAAU,kBAA9D,4BAJE6B,cC/BvBO,EATH,WACV,OACE,cAAC,IAAMX,SAAP,UACE,cAAC,EAAD,OCMSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e4c9f95a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Loading = () => {\r\n\r\n    const loadingImg = {\r\n        margin: '160px auto 0',\r\n        width: '250px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        verticalAlign: 'middle',\r\n        top: '40%'\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={loadingImg}>\r\n            <img src=\"https://c.tenor.com/gJLmlIn6EvEAAAAC/loading-gif.gif\" width=\"100%\" alt=\"NoImage\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","import React, { useEffect, useState } from 'react'\r\nimport Loading from './Loading'\r\n\r\nconst GithubApi = () => {\r\n\r\n\r\n    const [curData, setCurData] = useState([])\r\n    const [loading, setLoading] = useState(\"true\")\r\n    const getData = async () => {\r\n        try {\r\n            const url = \"https://api.github.com/users\";\r\n            let fetchData = await fetch(url);\r\n            let resData = await fetchData.json();\r\n            setLoading(false)\r\n            setCurData(resData);\r\n            // console.log(resData);\r\n        } catch (e) {\r\n            console.log(e);\r\n            setLoading(false)\r\n            \r\n        }\r\n\r\n        \r\n    }\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n    if(loading){\r\n      return <Loading />\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n        <div className=\"container\">\r\n            <h1 className=\"m-3 p-4\" style={{textAlign: 'center'}}>Github User API fetch</h1>\r\n            <div className=\"d-flex flex-wrap justify-content-center flex-row bd-highlight mb-3\">\r\n                {\r\n                    curData.map((curElem) => {\r\n                        let { id, avatar_url, login, html_url } = curElem;\r\n                        return (\r\n                            <div key={id} className=\"card p-4 m-4 bd-highlight col-md-3 col-sm-12\"  >\r\n                                <img src={avatar_url} alt=\"NoImage \" />\r\n                                <div className=\"card-body\">\r\n                                    <h5 className=\"card-title\">{login}</h5>\r\n                                    <a target=\"_blank\" rel=\"noreferrer\" href={html_url} className=\"btn btn-primary\">Know More</a>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default GithubApi\r\n","import React from 'react';\nimport GithubApi from './GithubApi';\n\nconst App = () => {\n  return (\n    <React.Fragment>\n      <GithubApi />\n    </React.Fragment>\n\n  )\n\n}\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}